plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
    
}

android {
    namespace = "com.example.sunrise_signal"
    compileSdk = 34
    ndkVersion = "25.1.8937393"

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true

        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.avizitrx.sunrise.signal"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        
        multiDexEnabled = true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}

dependencies {
    implementation 'androidx.window:window:1.0.0'
    implementation 'androidx.window:window-java:1.0.0'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.2.2'
}

// ext.abiCodes = ["armeabi-v7a": 1, "arm64-v8a": 2, "x86_64": 3]
// import com.android.build.api.variant.FilterConfiguration.FilterType.*
// // For each APK output variant, override versionCode with a combination of
// // abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// // is equal to defaultConfig.versionCode. If you configure product flavors that
// // define their own versionCode, variant.versionCode uses that value instead.
// androidComponents {
//     onVariants { variant ->

//         // Assigns a different version code for each output APK
//         // other than the universal APK.
//         variant.outputs.forEach { output ->
//             val name = output.filters.find { it.filterType == ABI }?.identifier

//             // Stores the value of abiCodes that is associated with the ABI for this variant.
//             val baseAbiCode = abiCodes[name]
//             // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
//             // the following code doesn't override the version code for universal APKs.
//             // However, because you want universal APKs to have the lowest version code,
//             // this outcome is desirable.
//             if (baseAbiCode != null) {
//                 // Assigns the new version code to output.versionCode, which changes the version code
//                 // for only the output APK, not for the variant itself.
//                 output.versionCode.set(baseAbiCode * 1000 + (output.versionCode.get() ?: 0))
//             }
//         }
//     }
// }